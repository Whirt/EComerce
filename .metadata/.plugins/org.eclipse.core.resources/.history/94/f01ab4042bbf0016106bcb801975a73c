/**
 * ProductTableModel is a table model.
 * 
 * ProductTableModel works both as table model and productManager wrapper.
 * It provides all of productManager method.
 */

package table;

import java.net.MalformedURLException;
import java.net.URL;

import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

import product.Product;
import product.ProductManager;

public class ProductTableModel extends DefaultTableModel {

	// This parameter states the class version
	private static final long serialVersionUID = -8133314890195531670L;
	
	// column and rows
	public static final int NAME_COLUMN = 0 ;
	public static final int BRAND_COLUMN = 1 ;
	public static final int CODE_COLUMN = 2 ;
	public static final int CLASS_COLUMN = 3 ;
	public static final int PRICE_COLUMN = 4 ;
	public static final int DISCOUNT_COLUMN = 5 ;
	public static final int IMAGE_COLUMN = 6 ;
	private static final String[] COLUMNBAR =
		{"Name", "Brand", "Code", "Class", "Price", "Sale", "Image"} ;
	private static final int NUMCOLUMN = 7 ;
	private int rows ;
	
	// Wrapped class
	private ProductManager<Product> productManager ;
	
	public ProductTableModel() {
		super(null, COLUMNBAR) ;
		
		productManager = new ProductManager<Product>() ;
		rows = 0 ; 
	}
	
	// table model methods
	@Override
	public int getRowCount() {
		return rows ;
	}
	@Override
	public int getColumnCount() {
		return NUMCOLUMN ;
	}

	// product manager getters & adder
	public Product getProduct(int index) {
		return productManager.getProduct(index) ;
	}
	public boolean addProduct(Product newProduct) {
		boolean success = productManager.add(newProduct) ;
		if (success) {
			rows++ ;
			fireTableDataChanged() ;
			return true ;
		}
		return false ;
	}
	public int getSize() {
		return productManager.getSize() ;
	}
	
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		Product product = productManager.getProduct(rowIndex) ;
		if (product == null)
			return null ;
		switch (columnIndex) {
		case NAME_COLUMN     : return product.getName() ;
		case BRAND_COLUMN    : return product.getBrand() ;
		case CODE_COLUMN     : return product.getCode() ;
		case CLASS_COLUMN    : return product.getType() ;
		case PRICE_COLUMN    : return product.getPrice() ;
		case DISCOUNT_COLUMN : return product.getDiscount() ;
		case IMAGE_COLUMN    : {
			URL imgUrl = null ;
			try { imgUrl = new URL(product.getImagePath()) ;
			} catch (MalformedURLException e) {
				System.out.println("Url Error") ; e.printStackTrace(); }
			
			return new ImageIcon(product.getImagePath(), null) ;
		}
		default: return null ;
		}
	}
	
	// needed to show icons
	 @Override
     public Class getColumnClass(int column) {
         return getValueAt(0, column).getClass();
     }
	
	@Override
	public boolean isCellEditable(int row, int column) {
		if (column != IMAGE_COLUMN)
			return false ;
		return true ;
	}
	
	// Is protected to be invoked by TableHeader
	protected Product searchProduct(String pattern) {
		return productManager.getProduct(0) ;
	}
}

