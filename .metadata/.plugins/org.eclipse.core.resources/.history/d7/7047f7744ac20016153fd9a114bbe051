/**
 * Frame that handles account creation. 
 * If success E-Commerce home will be shown.
 * 
 * @author hu
 */

package login;

import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

import ecommerce.ECommerce;
import user.User;
import user.UserType;

public class UserRegister extends JFrame implements ActionListener {
	
	// Singleton characteristics 
	private static UserRegister userRegister = null ;
	
	public static UserRegister getUserRegister() {
		if (userRegister == null) {
			userRegister = new UserRegister("New User") ;
			return userRegister ;
		}
		return userRegister ;
	}
	
	// color
	private static final int R = 84 ;
	private static final int G = 108 ;
	private static final int B = 206 ;
	private Color backgroundColor ;
	
	// username and password
	private static final int USERNAME_MIN_LENGTH = 4 ;
	private static final int PASSWORD_MIN_LENGTH = 6 ;
	
	// frame and text settings
	private static final int START_X = 220 ;
	private static final int START_Y = 280 ;
	private static final int WIDTH = 280 ;
	private static final int HEIGHT = 190 ;
	private static final int TXTMAXLEN = 15 ;
	
	// components
	private JLabel nameLabel ;
	private JLabel passwdLabel ;
	private JLabel repeatPswdLabel ;
	private JLabel outcomeLabel ;
	private JTextField nameTxtField ;
	private JTextField passwdField ;
	private JTextField repeatPswdField ;
	private JTextField outcomeTxtField ;
	// buttons
	private JButton createButton ;
	private JButton backButton ;
	private ButtonGroup group ;
	private JRadioButton administratorButton ;
	private JRadioButton customerButton ;
	
	// layout
	private FlowLayout layout ;
	
	private UserRegister(String title) {
		super(title) ;
		setBounds(START_X, START_Y, WIDTH, HEIGHT) ;
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE) ;
		setResizable(false) ;
		
		backgroundColor = new Color(R, G, B) ;
		
		// labels
		nameLabel = new JLabel("Name: ") ;
		passwdLabel = new JLabel("Password: ") ;
		repeatPswdLabel = new JLabel("Repeat: ") ;
		outcomeLabel = new JLabel("Outcome: ") ;
		// color setting
		nameLabel.setForeground(Color.WHITE) ;
		passwdLabel.setForeground(Color.WHITE) ;
		repeatPswdLabel.setForeground(Color.WHITE) ;
		outcomeLabel.setForeground(Color.WHITE) ;
		// textfield
		nameTxtField = new JTextField("", TXTMAXLEN) ;
		nameTxtField.setEditable(true) ;
		passwdField = new JPasswordField("", TXTMAXLEN) ;
		passwdField.setEditable(true) ;
		repeatPswdField = new JPasswordField("", TXTMAXLEN) ;
		repeatPswdField.setEditable(true) ;
		outcomeTxtField = new JTextField("", TXTMAXLEN) ;
		outcomeTxtField.setEditable(false) ;
		// buttons
		createButton = new JButton("Create") ;
		createButton.addActionListener(this) ;
		backButton = new JButton("Back") ;
		backButton.addActionListener(this) ;
		group = new ButtonGroup() ;
		administratorButton = new JRadioButton("Administrator") ;
		administratorButton.setForeground(Color.WHITE) ;
		administratorButton.setBackground(backgroundColor) ;
		customerButton = new JRadioButton("Customer") ;
		customerButton.setForeground(Color.WHITE) ;
		customerButton.setBackground(backgroundColor) ;
		group.add(administratorButton) ;
		group.add(customerButton) ;
		
		// mixing up
		Container contentPane = getContentPane() ;
		layout = new FlowLayout(FlowLayout.TRAILING) ;
		contentPane.setBackground(backgroundColor) ;
		contentPane.setLayout(layout) ;
		contentPane.add(nameLabel) ; contentPane.add(nameTxtField) ;
		contentPane.add(passwdLabel) ; contentPane.add(passwdField) ;
		contentPane.add(repeatPswdLabel) ; contentPane.add(repeatPswdField) ;
		contentPane.add(outcomeLabel) ; contentPane.add(outcomeTxtField) ;
		contentPane.add(administratorButton) ;
		contentPane.add(customerButton) ;
		contentPane.add(createButton) ; contentPane.add(backButton) ;
		
		setVisible(true) ;
	}
	private UserRegister() { ; }
	
	@Override
	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource() ;
		if (source != createButton)
			dispose() ;
		
		// retrieving data
		String username = nameTxtField.getText() ;
		String password = passwdField.getText() ;
		// several controls
		if (username == null) {
			outcomeTxtField.setText("User name cannot be empty") ;
			return ;
		} if (username.length() < USERNAME_MIN_LENGTH) {
			outcomeTxtField.setText("Username too short") ;
			return ;
		} if (password == null) {
			outcomeTxtField.setText("Password must be set") ;
			return ;
		} if (password.length() < PASSWORD_MIN_LENGHT) {
			outcomeTxtField.setText("Password too short") ;
			return ;
		}
		
		/*
		
		// This can be seen as the real launcher
		if (pswdField.getText().equals(repeatPswdField.getText())) {
			UserType type = null ;
			if (administratorButton.isSelected())
				type = UserType.ADMINISTRATOR ;
			if (customerButton.isSelected())
				type = UserType.CUSTOMER ;
			User user = new User(nameTxtField.getText(),
						            pswdField.getText(), type) ;
			ECommerce ec = new ECommerce(user) ;
			dispose() ;
		}	
		outcomeTxtField.setText("Password not repeated") ;
		
		*/
	}
	
	
	
}
